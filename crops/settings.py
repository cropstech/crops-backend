"""
Django settings for crops project.

Generated by 'django-admin startproject' using Django 3.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


import environ
env = environ.Env()
# Load environment from a specified file if provided, otherwise prefer .env.production then .env

# Prefer .env by default; use .env.production only if ENV_FILE is set or explicitly requested
_env_file = os.environ.get("ENV_FILE")
if _env_file and os.path.exists(_env_file):
    environ.Env.read_env(_env_file)
else:
    env_dev = os.path.join(BASE_DIR, ".env")
    if os.path.exists(env_dev):
        environ.Env.read_env(env_dev)

env = environ.Env(
    # set casting, default value
    DEBUG=(bool, True),
    ALLOWED_HOSTS=(list, ['127.0.0.1', 'localhost']),
    FRONTEND_URL=(str, 'https://localhost:9000'),
    STATIC_URL=(str),
    CDN_URL=(str),
    AWS_S3_CUSTOM_DOMAIN=(str),
    AWS_STORAGE_BUCKET_NAME=(str),
    AWS_S3_LOCATION=(str, 'us-east-2'),
    CELERY_BROKER_URL=(str, 'redis://:tzJ*cEscpUonRqAoVAQ9TNB%8KkGSD58%3xeNN^4@10.0.0.6:6379/0'),
    CELERY_RESULT_BACKEND=(str, 'redis://:tzJ*cEscpUonRqAoVAQ9TNB%8KkGSD58%3xeNN^4@10.0.0.6:6379/1'),
    LAMBDA_AUTH_TOKEN=(str, 'supersecret'),
)

LAMBDA_AUTH_TOKEN = env('LAMBDA_AUTH_TOKEN')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY', default='dev-secret')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

ALLOWED_HOSTS = env('ALLOWED_HOSTS')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'mptt',
    'users',
    'main',
    'corsheaders',
    'storages',
    'django_paddle_billing',
    
    # Notification system
    'notifications',
    'django_celery_beat',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'ninja_put_patch_file_upload_middleware.middlewares.process_put_patch', // Disabled because I can't find the file anymore
]

ROOT_URLCONF = 'crops.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'crops.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# Prefer DATABASE_URL when provided (e.g., to connect to Postgres), otherwise fallback to local sqlite
# Note: default must be a URL string for django-environ, not a dict
DATABASES = {
    'default': env.db(
        'DATABASE_URL',
        default='sqlite:///' + str(BASE_DIR / 'db.sqlite3'),
    )
}

AUTH_USER_MODEL = 'users.CustomUser'

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Email settings
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # uncomment for local dev
EMAIL_BACKEND = 'django_ses.SESBackend'
DEFAULT_FROM_EMAIL = 'Crops <support@crops.is>'


# Frontend URL for verification links
FRONTEND_URL = env('FRONTEND_URL')  # Or your frontend URL

CORS_ALLOWED_ORIGINS = [
    "http://localhost:9000",
    "http://localhost:9100",
    "http://localhost:8000",
    "http://localhost:3000",
    "http://localhost:8100",
    "http://127.0.0.1:8000",
    "http://127.0.0.1:9000",
    "http://127.0.0.1:9100",
]
CORS_ALLOW_CREDENTIALS = True
CORS_EXPOSE_HEADERS = ['Content-Type', 'X-CSRFToken']

CSRF_COOKIE_NAME = 'csrftoken'
CSRF_HEADER_NAME = 'HTTP_X_CSRFTOKEN'
CSRF_COOKIE_HTTPONLY = False
CSRF_USE_SESSIONS = False
CSRF_COOKIE_SAMESITE = 'Lax'
CSRF_TRUSTED_ORIGINS = [
    "http://localhost:9100",
    "http://localhost:9000",
    "http://localhost:8000",
    "http://localhost:3000",
    'http://127.0.0.1:8000/',
    'http://127.0.0.1:9000/',
    'http://127.0.0.1:9100/',
]

DATA_UPLOAD_MAX_MEMORY_SIZE = 52428800  # 50MB in bytes
FILE_UPLOAD_MAX_MEMORY_SIZE = 52428800  # 50MB in bytes

USERNAME_FIELD = 'email'

# AWS settings
# Prefer standard AWS_* env vars; fall back to legacy S3_* names for backwards compatibility
AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID', default=None)
AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY', default=None)
AWS_STORAGE_BUCKET_NAME = env('AWS_STORAGE_BUCKET_NAME')
AWS_STORAGE_CDN_BUCKET_NAME = env('AWS_STORAGE_CDN_BUCKET_NAME')
AWS_S3_REGION_NAME = env('AWS_S3_LOCATION')
AWS_S3_CUSTOM_DOMAIN = env('AWS_S3_CUSTOM_DOMAIN')
CDN_URL = env('CDN_URL')

# Storage configuration using Django 4.2+ format
STORAGES = {
    "default": {  # For media files
        "BACKEND": "storages.backends.s3.S3Storage",
        "OPTIONS": {
            "bucket_name": AWS_STORAGE_BUCKET_NAME,
            "access_key": AWS_ACCESS_KEY_ID,
            "secret_key": AWS_SECRET_ACCESS_KEY,
            "region_name": AWS_S3_REGION_NAME,
            "custom_domain": AWS_S3_CUSTOM_DOMAIN,
            "file_overwrite": False,
            "location": "media",
        },
    },
    "staticfiles": {  # For static files
        "BACKEND": "storages.backends.s3.S3Storage",
        "OPTIONS": {
            "bucket_name": AWS_STORAGE_CDN_BUCKET_NAME,
            "access_key": AWS_ACCESS_KEY_ID,
            "secret_key": AWS_SECRET_ACCESS_KEY,
            "region_name": AWS_S3_REGION_NAME,
            # Use CDN domain for static files
            "custom_domain": CDN_URL.replace("https://", "").rstrip("/"),
            "file_overwrite": True,
            "location": "static",
        },
    },
}

# URLs for static and media files
STATIC_URL = f'{CDN_URL}/static/'
MEDIA_URL = f'{CDN_URL}/processed/'

# Still needed for collectstatic
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Additional S3 settings
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}

AWS_SES_ACCESS_KEY_ID = env('AWS_SES_ACCESS_KEY_ID')
AWS_SES_SECRET_ACCESS_KEY = env('AWS_SES_SECRET_ACCESS_KEY')

AWS_SES_REGION_NAME = 'us-east-2'
AWS_SES_REGION_ENDPOINT = 'email.us-east-2.amazonaws.com'

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'crops': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# Paddle settings
PADDLE_BILLING = {
    "PADDLE_API_TOKEN": env("PADDLE_API_TOKEN", default=""),
    "PADDLE_CLIENT_TOKEN": env("PADDLE_CLIENT_TOKEN", default=""),
    "PADDLE_SECRET_KEY": env("PADDLE_SECRET_KEY", default=""),
    "PADDLE_API_URL": env("PADDLE_API_URL", default="https://sandbox-api.paddle.com"),
    "PADDLE_IPS": [
        "34.232.58.13", "34.195.105.136", "34.237.3.244",
        "35.155.119.135", "52.11.166.252", "34.212.5.7"
    ],
    "PADDLE_SANDBOX_IPS": [
        "34.194.127.46",
        "54.234.237.108",
        "3.208.120.145",
        "44.226.236.210",
        "44.241.183.62",
        "100.20.172.113",
    ],
    "PADDLE_SANDBOX": env.bool("PADDLE_SANDBOX", default=True),
    "PADDLE_ACCOUNT_MODEL": "users.CustomUser",
    "ADMIN_READONLY": env.bool("PADDLE_ADMIN_READONLY", default=True),
}

# Notification System Configuration
NOTIFICATIONS_NOTIFICATION_MODEL = 'notifications.Notification'
NOTIFICATIONS_SOFT_DELETE = True
NOTIFICATIONS_USE_JSONFIELD = True

# Celery Configuration (extending your existing setup)
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE

# Celery Beat Configuration for periodic tasks
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# Email Batching Settings
EMAIL_BATCH_FREQUENCY = 5  # minutes
EMAIL_BATCH_MAX_SIZE = 20  # max notifications per email

# Asset Checker Service Configuration
ASSET_CHECKER_API_URL = env('ASSET_CHECKER_API_URL', default='https://api.asset-checker.example.com')
LAMBDA_AUTH_TOKEN = env('LAMBDA_AUTH_TOKEN')
WEBHOOK_BASE_URL = env('WEBHOOK_BASE_URL', default='https://api.crops.is')
