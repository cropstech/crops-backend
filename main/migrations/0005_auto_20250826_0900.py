# Generated by Django 5.2 on 2025-08-26 09:00

from django.db import migrations
from django.db.models import Count


def remove_duplicate_share_links(apps, schema_editor):
    """
    Remove duplicate share links, keeping only the most recent one for each content object
    """
    ShareLink = apps.get_model('main', 'ShareLink')
    
    # Find duplicates by content_type and object_id
    duplicates = (ShareLink.objects
                 .values('content_type', 'object_id')
                 .annotate(count=Count('id'))
                 .filter(count__gt=1))
    
    for duplicate_group in duplicates:
        content_type_id = duplicate_group['content_type']
        object_id = duplicate_group['object_id']
        
        # Get all share links for this content object
        share_links = ShareLink.objects.filter(
            content_type_id=content_type_id,
            object_id=object_id
        ).order_by('-created_at')  # Most recent first
        
        # Keep the most recent one, delete the rest
        links_to_delete = share_links[1:]  # Skip the first (most recent)
        for link in links_to_delete:
            link.delete()


def reverse_remove_duplicates(apps, schema_editor):
    """
    This migration is irreversible since we're deleting data
    """
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0004_alter_sharelink_unique_together_and_more'),
    ]

    operations = [
        migrations.RunPython(
            remove_duplicate_share_links,
            reverse_remove_duplicates,
            atomic=True,
        ),
        migrations.AlterUniqueTogether(
            name='sharelink',
            unique_together={('content_type', 'object_id')},
        ),
    ]
