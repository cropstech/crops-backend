# Generated by Django 5.2 on 2025-08-09 15:36

import django.db.models.deletion
import main.models
import mptt.fields
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('django_paddle_billing', '0003_discount'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        migrations.swappable_dependency(settings.NOTIFICATIONS_NOTIFICATION_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomField',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('field_type', models.CharField(choices=[('SINGLE_SELECT', 'Single Select'), ('MULTI_SELECT', 'Multi Select'), ('TEXT', 'Plain Text'), ('DATE', 'Date')], max_length=20)),
                ('description', models.TextField(blank=True)),
                ('order', models.PositiveIntegerField(default=0)),
            ],
            options={
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('file', models.FileField(max_length=500, upload_to=main.models.workspace_asset_path)),
                ('file_type', models.CharField(choices=[('IMAGE', 'Image'), ('VIDEO', 'Video'), ('DOCUMENT', 'Document'), ('AUDIO', 'Audio'), ('OTHER', 'Other')], max_length=20)),
                ('mime_type', models.CharField(blank=True, max_length=127, null=True)),
                ('file_extension', models.CharField(blank=True, max_length=20, null=True)),
                ('favorite', models.BooleanField(default=False)),
                ('width', models.IntegerField(blank=True, null=True)),
                ('height', models.IntegerField(blank=True, null=True)),
                ('duration', models.FloatField(blank=True, null=True)),
                ('size', models.BigIntegerField()),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('date_created', models.DateTimeField(blank=True, null=True)),
                ('date_modified', models.DateTimeField(auto_now=True)),
                ('date_uploaded', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='PROCESSING', max_length=20)),
                ('processing_error', models.TextField(blank=True, null=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AssetAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raw_analysis', models.JSONField(default=dict)),
                ('labels', models.JSONField(default=list, help_text='AI-detected objects/scenes')),
                ('moderation_labels', models.JSONField(default=list, help_text='Content moderation results')),
                ('searchable_text', models.TextField(blank=True, help_text='Flattened text of all labels for searching')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('asset', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ai_analysis', to='main.asset')),
            ],
            options={
                'verbose_name_plural': 'Asset analyses',
            },
        ),
        migrations.CreateModel(
            name='Board',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('order', models.PositiveIntegerField(default=0, help_text='Order in which to display this board')),
                ('default_view', models.CharField(choices=[('GALLERY', 'Gallery'), ('KANBAN', 'Kanban'), ('TABLE', 'Table')], default='GALLERY', help_text='Default view type for this board', max_length=20)),
                ('default_sort', models.CharField(choices=[('custom', 'Custom order (drag and drop)'), ('-date_uploaded', 'Date uploaded (newest first)'), ('date_uploaded', 'Date uploaded (oldest first)'), ('-date_created', 'Date created (newest first)'), ('date_created', 'Date created (oldest first)'), ('-date_modified', 'Date modified (newest first)'), ('date_modified', 'Date modified (oldest first)'), ('name', 'Name (A-Z)'), ('-name', 'Name (Z-A)'), ('-size', 'File size (largest first)'), ('size', 'File size (smallest first)')], default='-date_uploaded', help_text='Default sort order for assets in this board', max_length=30)),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('parent', mptt.fields.TreeForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='main.board')),
                ('kanban_group_by_field', models.ForeignKey(blank=True, help_text='Custom field to group by when using kanban view (should be a single-select field)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='main.customfield')),
            ],
            options={
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='BoardAsset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('position', models.JSONField(null=True)),
                ('order', models.PositiveIntegerField(default=0, help_text='Manual ordering position within this board')),
                ('added_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.asset')),
                ('board', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.board')),
            ],
            options={
                'ordering': ['order', 'added_at'],
                'unique_together': {('board', 'asset')},
            },
        ),
        migrations.AddField(
            model_name='asset',
            name='boards',
            field=models.ManyToManyField(related_name='assets', through='main.BoardAsset', to='main.board'),
        ),
        migrations.CreateModel(
            name='CustomFieldOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=255)),
                ('order', models.PositiveIntegerField(default=0)),
                ('color', models.CharField(default='#000000', max_length=7)),
                ('field', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='options', to='main.customfield')),
            ],
            options={
                'ordering': ['order'],
                'unique_together': {('field', 'label')},
            },
        ),
        migrations.CreateModel(
            name='CustomFieldValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.UUIDField()),
                ('text_value', models.TextField(blank=True, null=True)),
                ('date_value', models.DateTimeField(blank=True, null=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('field', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.customfield')),
                ('multi_options', models.ManyToManyField(blank=True, related_name='multi_field_values', to='main.customfieldoption')),
                ('option_value', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='field_values', to='main.customfieldoption')),
            ],
            options={
                'unique_together': {('field', 'content_type', 'object_id')},
            },
        ),
        migrations.CreateModel(
            name='AIActionResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('grammar', 'Grammar Check'), ('image_quality', 'Image Quality Check'), ('color_contrast', 'Color Contrast Analysis'), ('color_blindness', 'Color Blindness Analysis'), ('font_size_detection', 'Font Size Detection'), ('text_overflow', 'Text Overflow Detection'), ('placeholder_detection', 'Placeholder Text Detection'), ('repeated_text', 'Repeated Text Detection')], max_length=50)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PROCESSING', 'Processing'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='PENDING', max_length=20)),
                ('result', models.JSONField(default=dict, help_text='Results of the AI analysis')),
                ('error_message', models.TextField(blank=True, help_text='Error message if the action failed', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('field_value', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_results', to='main.customfieldvalue')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserNotificationPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_preferences', models.JSONField(default=dict)),
                ('email_frequency', models.PositiveIntegerField(default=5, help_text='Minutes between email notifications (for batching)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='notification_preference', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Workspace',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to=main.models.workspace_avatar_path)),
                ('subscriptions', models.ManyToManyField(blank=True, related_name='workspaces', to='django_paddle_billing.subscription')),
            ],
        ),
        migrations.CreateModel(
            name='ShareLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('permission', models.CharField(choices=[('VIEW', 'View only'), ('COMMENT', 'Can comment'), ('EDIT', 'Can edit'), ('SUBMIT', 'Can submit (for forms)')], default='VIEW', max_length=20)),
                ('object_id', models.PositiveIntegerField()),
                ('expires_at', models.DateTimeField(blank=True, null=True)),
                ('password', models.CharField(blank=True, max_length=128, null=True)),
                ('max_uses', models.PositiveIntegerField(blank=True, null=True)),
                ('current_uses', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('workspace', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.workspace')),
            ],
        ),
        migrations.AddField(
            model_name='customfield',
            name='workspace',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='custom_fields', to='main.workspace'),
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assets', models.ManyToManyField(related_name='collections', to='main.asset')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('workspace', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='collections', to='main.workspace')),
            ],
        ),
        migrations.AddField(
            model_name='board',
            name='workspace',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='boards', to='main.workspace'),
        ),
        migrations.AddField(
            model_name='asset',
            name='workspace',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assets', to='main.workspace'),
        ),
        migrations.CreateModel(
            name='WorkspaceInvitation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('role', models.CharField(choices=[('ADMIN', 'Administrator'), ('EDITOR', 'Editor'), ('COMMENTER', 'Commenter')], max_length=20)),
                ('token', models.UUIDField(default=uuid.uuid4, editable=False)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('ACCEPTED', 'Accepted'), ('REJECTED', 'Rejected'), ('EXPIRED', 'Expired')], default='PENDING', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('invited_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('workspace', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.workspace')),
            ],
        ),
        migrations.CreateModel(
            name='WorkspaceMember',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('ADMIN', 'Administrator'), ('EDITOR', 'Editor'), ('COMMENTER', 'Commenter')], max_length=20)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('invited_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='invites_sent', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('workspace', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='main.workspace')),
            ],
            options={
                'unique_together': {('workspace', 'user')},
            },
        ),
        migrations.AddField(
            model_name='workspace',
            name='members',
            field=models.ManyToManyField(related_name='workspaces', through='main.WorkspaceMember', through_fields=('workspace', 'user'), to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='AssetCheckerAnalysis',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('check_id', models.CharField(max_length=100, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('s3_bucket', models.CharField(max_length=255)),
                ('s3_key', models.CharField(max_length=1024)),
                ('webhook_received', models.BooleanField(default=False)),
                ('results', models.JSONField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('use_webhook', models.BooleanField(default=True)),
                ('webhook_url', models.URLField(blank=True, null=True)),
                ('callback_url', models.URLField(blank=True, null=True)),
                ('ai_action_result_id', models.IntegerField(blank=True, help_text='ID of the AIActionResult that triggered this analysis', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('board', models.ForeignKey(blank=True, help_text='Board context that triggered this analysis. Null means global analysis.', null=True, on_delete=django.db.models.deletion.CASCADE, to='main.board')),
            ],
            options={
                'indexes': [models.Index(fields=['check_id'], name='main_assetc_check_i_d03de2_idx'), models.Index(fields=['status'], name='main_assetc_status_eacdae_idx'), models.Index(fields=['board', 'status'], name='main_assetc_board_i_4ffc29_idx'), models.Index(fields=['created_at'], name='main_assetc_created_e0a4ff_idx')],
            },
        ),
        migrations.CreateModel(
            name='BoardExplicitUnfollow',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('unfollowed_at', models.DateTimeField(auto_now_add=True)),
                ('board', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='explicit_unfollows', to='main.board')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='board_explicit_unfollows', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['user', 'board'], name='main_boarde_user_id_fdac70_idx')],
                'unique_together': {('user', 'board')},
            },
        ),
        migrations.CreateModel(
            name='BoardFollower',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('include_sub_boards', models.BooleanField(default=True)),
                ('auto_followed', models.BooleanField(default=False, help_text='Whether this was automatically created by the system')),
                ('board', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers', to='main.board')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followed_boards', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['user', 'board'], name='main_boardf_user_id_085f57_idx')],
                'unique_together': {('user', 'board')},
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.UUIDField()),
                ('text', models.TextField()),
                ('comment_type', models.CharField(default='USER', help_text='Type of comment (USER, AI_ANALYSIS, SYSTEM, etc.)', max_length=50)),
                ('severity', models.CharField(blank=True, choices=[('high', 'High'), ('medium', 'Medium'), ('low', 'Low'), ('info', 'Info')], help_text='Severity level for AI analysis comments', max_length=20, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('annotation_type', models.CharField(choices=[('NONE', 'No annotation'), ('POINT', 'Point annotation'), ('AREA', 'Area annotation')], default='NONE', max_length=20)),
                ('x', models.FloatField(blank=True, null=True)),
                ('y', models.FloatField(blank=True, null=True)),
                ('width', models.FloatField(blank=True, null=True)),
                ('height', models.FloatField(blank=True, null=True)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
                ('board', models.ForeignKey(blank=True, help_text="Board context for this comment. Null means global 'all assets' comment.", null=True, on_delete=django.db.models.deletion.CASCADE, to='main.board')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('mentioned_users', models.ManyToManyField(blank=True, related_name='mentioned_in_comments', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='main.comment')),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['content_type', 'object_id'], name='main_commen_content_4621bf_idx'), models.Index(fields=['content_type', 'object_id', 'board'], name='main_commen_content_eb1b26_idx'), models.Index(fields=['board', 'created_at'], name='main_commen_board_i_d260f1_idx'), models.Index(fields=['created_at'], name='main_commen_created_c43ef2_idx'), models.Index(fields=['author'], name='main_commen_author__c512fc_idx')],
            },
        ),
        migrations.CreateModel(
            name='CustomFieldOptionAIAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('grammar', 'Grammar Check'), ('image_quality', 'Image Quality Check'), ('color_contrast', 'Color Contrast Analysis'), ('color_blindness', 'Color Blindness Analysis'), ('font_size_detection', 'Font Size Detection'), ('text_overflow', 'Text Overflow Detection'), ('placeholder_detection', 'Placeholder Text Detection'), ('repeated_text', 'Repeated Text Detection')], max_length=50)),
                ('is_enabled', models.BooleanField(default=True, help_text='Whether this action is currently enabled for this option')),
                ('configuration', models.JSONField(default=dict, help_text='Configuration settings for this action')),
                ('option', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_action_configs', to='main.customfieldoption')),
            ],
            options={
                'unique_together': {('option', 'action')},
            },
        ),
        migrations.CreateModel(
            name='EmailBatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scheduled_for', models.DateTimeField()),
                ('sent', models.BooleanField(default=False)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('notifications', models.ManyToManyField(related_name='email_batches', to=settings.NOTIFICATIONS_NOTIFICATION_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['user', 'scheduled_for'], name='main_emailb_user_id_d91593_idx'), models.Index(fields=['sent', 'scheduled_for'], name='main_emailb_sent_b87c19_idx')],
            },
        ),
        migrations.CreateModel(
            name='NotificationPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('comment_on_followed_board_asset', 'New comments on assets in followed boards'), ('mention_in_comment', '@ mentions on assets'), ('reply_to_thread', "Replies to threads you've started or are in"), ('sub_board_created', 'New sub-boards created in followed boards'), ('asset_uploaded_to_followed_board', 'New items uploaded to followed boards'), ('field_change_in_followed_board', 'Custom field changes to followed boards & their assets'), ('ai_check_completed', 'AI Check Completed'), ('asset_favorited', 'Asset Favorited')], max_length=60)),
                ('in_app_enabled', models.BooleanField(default=True, help_text='Receive in-app notifications')),
                ('email_enabled', models.BooleanField(default=True, help_text='Receive email notifications')),
                ('email_frequency', models.PositiveIntegerField(default=5, help_text='Minutes between email notifications (for batching)')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='old_notification_preferences', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'event_type')},
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.UUIDField()),
                ('event_types', models.JSONField(default=list, help_text='List of event types to receive notifications for')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notification_subscriptions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['user', 'content_type', 'object_id'], name='main_subscr_user_id_8875da_idx')],
                'unique_together': {('user', 'content_type', 'object_id')},
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('is_ai_generated', models.BooleanField(default=False, help_text='Whether this tag was generated by AI analysis')),
                ('confidence_score', models.FloatField(blank=True, help_text='Confidence score for AI-generated tags (0.0 - 1.0)', null=True)),
                ('tag_type', models.CharField(choices=[('MANUAL', 'Manual'), ('AI_LABEL', 'AI Object/Scene Detection'), ('AI_MODERATION', 'AI Content Moderation')], default='MANUAL', help_text='Source type of this tag', max_length=20)),
                ('assets', models.ManyToManyField(related_name='tags', to='main.asset')),
                ('source_analysis', models.ForeignKey(blank=True, help_text='The AI analysis that generated this tag', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='generated_tags', to='main.assetanalysis')),
                ('workspace', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tags', to='main.workspace')),
            ],
            options={
                'indexes': [models.Index(fields=['workspace', 'is_ai_generated'], name='main_tag_workspa_aa532f_idx'), models.Index(fields=['workspace', 'tag_type'], name='main_tag_workspa_19484a_idx')],
                'unique_together': {('name', 'workspace')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='customfield',
            unique_together={('workspace', 'title')},
        ),
    ]
