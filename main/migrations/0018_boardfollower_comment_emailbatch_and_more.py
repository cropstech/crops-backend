# Generated by Django 5.2 on 2025-06-11 17:51

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('main', '0017_customfield_customfieldoption_customfieldvalue_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        migrations.swappable_dependency(settings.NOTIFICATIONS_NOTIFICATION_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BoardFollower',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('include_sub_boards', models.BooleanField(default=True)),
                ('board', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followers', to='main.board')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followed_boards', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['user', 'board'], name='main_boardf_user_id_085f57_idx')],
                'unique_together': {('user', 'board')},
            },
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.UUIDField()),
                ('text', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('mentioned_users', models.ManyToManyField(blank=True, related_name='mentioned_in_comments', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='main.comment')),
            ],
            options={
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['content_type', 'object_id'], name='main_commen_content_4621bf_idx'), models.Index(fields=['created_at'], name='main_commen_created_c43ef2_idx'), models.Index(fields=['author'], name='main_commen_author__c512fc_idx')],
            },
        ),
        migrations.CreateModel(
            name='EmailBatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scheduled_for', models.DateTimeField()),
                ('sent', models.BooleanField(default=False)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('notifications', models.ManyToManyField(related_name='email_batches', to=settings.NOTIFICATIONS_NOTIFICATION_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['user', 'scheduled_for'], name='main_emailb_user_id_d91593_idx'), models.Index(fields=['sent', 'scheduled_for'], name='main_emailb_sent_b87c19_idx')],
            },
        ),
        migrations.CreateModel(
            name='NotificationPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('comment_on_followed_board_asset', 'New comments on assets in followed boards'), ('mention_in_comment', '@ mentions on assets'), ('reply_to_thread', "Replies to threads you've started or are in"), ('sub_board_created', 'New sub-boards created in followed boards'), ('asset_uploaded_to_followed_board', 'New items uploaded to followed boards'), ('field_change_in_followed_board', 'Custom field changes to followed boards & their assets'), ('ai_check_completed', 'AI Check Completed'), ('asset_favorited', 'Asset Favorited')], max_length=60)),
                ('channel', models.CharField(choices=[('in_app', 'In-App Only'), ('email', 'Email Only'), ('both', 'Both In-App and Email'), ('none', 'No Notifications')], default='both', max_length=10)),
                ('email_frequency', models.PositiveIntegerField(default=5, help_text='Minutes between email notifications (for batching)')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notification_preferences', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'event_type')},
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.UUIDField()),
                ('event_types', models.JSONField(default=list, help_text='List of event types to receive notifications for')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notification_subscriptions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'indexes': [models.Index(fields=['user', 'content_type', 'object_id'], name='main_subscr_user_id_8875da_idx')],
                'unique_together': {('user', 'content_type', 'object_id')},
            },
        ),
    ]
