# Generated by Django 5.2 on 2025-08-09 15:37

import django.contrib.auth.validators
import django.utils.timezone
import users.fields
from django.db import migrations, models


class Migration(migrations.Migration):

    replaces = [('users', '0001_initial'), ('users', '0002_customuser_email_verified_and_more'), ('users', '0003_customuser_last_verification_email_sent_and_more'), ('users', '0004_alter_customuser_first_name_and_more'), ('users', '0005_customuser_new_email_customuser_new_email_token_and_more')]

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(blank=True, max_length=150)),
                ('last_name', models.CharField(blank=True, max_length=150)),
                ('email', users.fields.LowercaseEmailField(max_length=254, unique=True, verbose_name='email address')),
                ('is_active', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('beta_access', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('email_verified', models.BooleanField(default=False)),
                ('verification_token', models.CharField(blank=True, max_length=100, null=True)),
                ('last_verification_email_sent', models.DateTimeField(blank=True, null=True)),
                ('verification_email_sent_count', models.IntegerField(default=0)),
                ('verification_token_created', models.DateTimeField(blank=True, null=True)),
                ('new_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('new_email_token', models.CharField(blank=True, max_length=100, null=True)),
                ('new_email_token_created', models.DateTimeField(blank=True, null=True)),
                ('password_reset_token', models.CharField(blank=True, max_length=100, null=True)),
                ('password_reset_token_created', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ('-date_joined',),
            },
        ),
    ]
